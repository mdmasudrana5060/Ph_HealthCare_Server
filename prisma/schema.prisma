// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(uuid())
  email String @unique
  password String
  role UserRole
  needsPasswordChange Boolean @default(true)
  status UserStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  admin Admin?
  doctor Doctor?
  patient Patient?
}

model Admin{
  id String @id @default(uuid())
  name String
  email String @unique
  profilePhoto String?
  contactNumber String
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user User @relation(fields: [email],references: [email])

}
model Doctor{ 
  id String @id @default(uuid())
  name String
  email String @unique
  profilePhoto String?
  contactNumber String
  address String?
  registrationNumber String
  experience Int @default(0)
  gender Gender
  appointmentFee Int
  qualification String
  currentWorkingPlace String
  designation String
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [email],references: [email])
  doctorSpecialities DoctorSpecialities[]
  doctorSchedules DoctorSchedules[]
}

model Patient {
  id            String   @id @unique @default(uuid())
  email         String   @unique
  name          String
  profilePhoto  String?
  contactNumber String?
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  user          User    @relation(fields: [email],references: [email])
  patientHealthData PatientHealthData?
  medicalReport MedicalReport[]
}
model Specialities{
  id String @id @default(uuid())
  title String
  icon String
  doctorSpecialities DoctorSpecialities[]
}
model DoctorSpecialities{
  specialitiesId String
  specialities Specialities @relation(fields: [specialitiesId],references: [id])
  doctorId String
  doctor Doctor @relation(fields: [doctorId],references: [id])
  @@id([specialitiesId,doctorId])
}
model PatientHealthData {
  id                  String        @id @default(uuid())
  patientId           String        @unique
  patient             Patient       @relation(fields: [patientId], references: [id])
  gender              Gender
  dateOfBirth         String
  bloodGroup          BloodGroup
  hasAllergies        Boolean?      @default(false)
  hasDiabetes         Boolean?      @default(false)
  height              String
  weight              String
  smokingStatus       Boolean?      @default(false)
  dietaryPreferences  String?
  pregnancyStatus     Boolean?      @default(false)
  mentalHealthHistory String?
  immunizationStatus  String?
  hasPastSurgeries    Boolean?      @default(false)
  recentAnxiety       Boolean?      @default(false)
  recentDepression    Boolean?      @default(false)
  maritalStatus       MaritalStatus @default(UNMARRIED)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  
}
model MedicalReport {
  id         String   @id @default(uuid())
  patientId  String
  patient    Patient  @relation(fields: [patientId], references: [id])
  reportName String
  reportLink String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

}
model Schedule {
  id              String            @id @default(uuid())
  startDateTime   DateTime
  endDateTime     DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  doctorSchedules DoctorSchedules[]

}

model DoctorSchedules {
  doctorId String
  doctor   Doctor @relation(fields: [doctorId], references: [id])
  scheduleId String
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  isBooked Boolean @default(false)

  appointmentId String?      @unique
 
  @@id([doctorId, scheduleId])
  @@map("doctor_schedules")
}
enum UserRole { 
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}
enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}
enum Gender {
  MALE
  FEMALE
}
enum BloodGroup {
  A_POSITIVE
  B_POSITIVE
  O_POSITIVE
  AB_POSITIVE
  A_NEGATIVE
  B_NEGATIVE
  O_NEGATIVE
  AB_NEGATIVE
}

enum MaritalStatus {
  MARRIED
  UNMARRIED
}